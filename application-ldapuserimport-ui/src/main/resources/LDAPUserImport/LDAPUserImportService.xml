<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="LDAPUserImport.LDAPUserImportService" locale="">
  <web>LDAPUserImport</web>
  <name>LDAPUserImportService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>LDAPUserImportService</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#if ($xcontext.action == 'get')
  #if ($request.outputSyntax == 'plain')
    #set ($discard = $response.setContentType('application/json'))
  #end
  #if ($services.csrf.isTokenValid($request.form_token))
    ## Exclude some helper fields from being displayed in the feedback list.
    #set ($excludedFields = ['exists', 'uid', 'dn', 'userProfile', 'userProfileURL'])
    #set ($statusCode = 500)
    #if ($request.action == 'importUsers')
      #set ($noResultsMessage = $services.localization.render('importUsers.modal.fieldValue.noResults'))
      #set ($users = $services.ldapuserimport.importUsers($request.parameterMap.user, $request.groupReference))
      #foreach ($user in $users.entrySet())
        #set ($params = [])
        #foreach ($item in $user.value.entrySet())
          #if (!$excludedFields.contains($item.key))
            #set ($discard = $params.add($item.value))
          #end
        #end
        #set ($message = $services.localization.render('importUsers.modal.user.created', [$stringtool.join($params, ', ')]))
        #set ($user.value.displayMessage = $message)
      #end
      #set ($statusCode = 200)
      $jsontool.serialize({
        'noResults': $noResultsMessage,
        'users': $users
      })
    #elseif ($request.action == 'getMappedXWikiGroups')
      #set ($statusCode = 200)
      $jsontool.serialize({'mappedXWikiGroups': $services.ldapuserimport.getXWikiMappedGroups()})
    #elseif ($request.action == 'getGroupMemberSize')
      #set ($groupMemberSize = $services.ldapuserimport.getGroupMemberSize($request.xWikiGroupName))
      #set ($statusCode = 200)
      $jsontool.serialize({
        'groupMemberSize': $groupMemberSize,
        'groupMemberSizeInfo': $services.localization.render('importUsers.groupUpdate.confirmationModal.info', [$groupMemberSize])
      })
    #elseif ($request.action == 'updateGroup')
      #set ($statusCode = 200)
      #set ($message = $services.localization.render('importUsers.groupUpdate.updatingGroup.success'))
      #if ($services.ldapuserimport.updateGroup($request.xWikiGroupName))
        #set ($message = $services.localization.render('importUsers.groupUpdate.updatingGroup.fail'))
      #end
      $jsontool.serialize({'message': $message})
    #elseif ($request.action == 'getLDAPGroups')
      #set ($noResultsMessage = $services.localization.render('importUsers.associateGroups.modal.fieldValue.noResults'))
      #set ($statusCode = 200)
      #set ($groups = $services.ldapuserimport.getLDAPGroups($request.searchInput, $request.xWikiGroupName))
      #foreach ($group in $groups.entrySet())
        #if ($group.value.isAssociated == true)
          #set ($message = $services.localization.render('importUsers.associateGroups.modal.alreadyAssociated', [$group.value.description, $group.value.cn]))
        #else
          #set ($message = $services.localization.render('importUsers.associateGroups.modal.toAssociate', [$group.value.description, $group.value.cn]))
        #end
        #set ($group.value.displayMessage = $message)
      #end
      $jsontool.serialize({
        'noResults': $noResultsMessage,
        'groups': $groups,
        'displayedMax': $services.ldapuserimport.displayedMax($groups.size())
      })
    #elseif ($request.action == 'associateGroups')
      #set ($statusCode = 200)
      #set ($status = 'fail')
      #set ($message = $services.localization.render('importUsers.associateGroups.modal.associationFail'))
      #if ($services.ldapuserimport.associateGroups($request.parameterMap.group, $request.xWikiGroupName))
        #set ($message = $services.localization.render('importUsers.associateGroups.modal.associationSuccess'))
        #set ($status = 'success')
      #end
      $jsontool.serialize({'message': $message, 'status': $status})
    #elseif ($request.action == 'searchUsers')
      #set ($users = $services.ldapuserimport.getUsers($request.singleField, $request.allFields, $request.searchInput))
      #set ($noResultsMessage = $services.localization.render('importUsers.modal.fieldValue.noResults'))
      #foreach ($user in $users.entrySet())
        #set ($params = [])
        #foreach ($item in $user.value.entrySet())
          #if (!$excludedFields.contains($item.key))
            #set ($discard = $params.add($item.value))
          #end
        #end
        #if ($user.value.exists == true)
          #set ($message = $services.localization.render('importUsers.modal.user.alreadyImported', [$stringtool.join($params, ', ')]))
        #else
          #set ($message = $services.localization.render('importUsers.modal.user.toImport', [$stringtool.join($params, ', ')]))
        #end
        #set ($user.value.displayMessage = $message)
      #end
      #set ($statusCode = 200)
      $jsontool.serialize({
        'noResults': $noResultsMessage,
        'users': $users,
        'displayedMax': $services.ldapuserimport.displayedMax($users.size())
      })
    #end
  #else
    #set ($statusCode = 400)
  #end
  #set ($discard = $response.setStatus($statusCode))
#end
{{/velocity}}
</content>
</xwikidoc>
